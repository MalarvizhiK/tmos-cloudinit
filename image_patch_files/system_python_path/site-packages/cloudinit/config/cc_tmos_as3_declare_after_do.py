#!/usr/bin/env python

# coding=utf-8
# pylint: disable=broad-except,unused-argument,line-too-long
# Copyright (c) 2016-2018, F5 Networks, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
"""
This module contains the business logic needed to handle the
f5-appsvcs-extension declaration after f5-declarative-onboarding completes.
"""

import logging
import time
import os
import subprocess
import sys

import tmos_onboard_utils

from cloudinit import util

DO_TIMEOUT = 3600

ONBOARD_TIMEOUT = 600

LOG_FILE = '/config/cloud/f5-cloudinit.log'

CLOUD_CONFIG_FILE = '/opt/cloud/instance/cloud-config.txt'

AS3_DELAYED_DEPLOYMENT_SCRIPT = 'cc_tmos_as3_declare_after_do.py'

POST_ONBOARD_CMD_FILE_DIR_PREFIX = '/config/cloud/'
POST_ONBOARD_CMD_FILE_DIR_POSTFIX = '/initscripts/post'

ERROR = 'ERROR'
SUCCESS = 'SUCCESS'

tmos_onboard_utils.touch_logfile(LOG_FILE)

LOG = logging.getLogger('as3_declare_after_do')
LOG.setLevel(logging.DEBUG)
FORMATTER = logging.Formatter(
    '%(asctime)s - %(name)s - %(levelname)s - %(message)s')
LOGFILE = logging.FileHandler(LOG_FILE)
LOGFILE.setLevel(logging.DEBUG)
LOGFILE.setFormatter(FORMATTER)
LOG.addHandler(LOGFILE)


def wait_for_do_to_complete():
    """Blocks until the f5-declarative-onboarding is complete"""
    LOG.debug('waiting for mcpd to become available')
    tmos_onboard_utils.wait_for_mcpd()
    LOG.debug('waiting for iControl to become available')
    tmos_onboard_utils.wait_for_icontrol()
    LOG.debug('waiting for iControl LX to become available')
    tmos_onboard_utils.wait_for_icontrollx()
    LOG.debug('starting f5-declarative-onboarding watcher')
    end_time = time.time() + DO_TIMEOUT
    while (end_time - time.time()) > 0:
        try:
            response = tmos_onboard_utils.get_do_declaration()
            if response:
                if response.status_code == 200:
                    LOG.info('f5-declarative-onboarding shows complete')
                    return True
                if response.status_code > 399:
                    json_resp = response.json()
                    LOG.debug('f5-declarative-onboarding error %s - %s',
                              response.status_code, json_resp)
                    if 'status' in json_resp and 'declaration' in json_resp:
                        return False
                time.sleep(1)
        except Exception as excpt:
            LOG.error('f5-declarative-onboarding threw an execption: %s', excpt)
            time.sleep(1)
    LOG.error(
        'f5-declarative-onboarding did not successfully complete after %s', DO_TIMEOUT)
    return False


def handle(name, cloud_config, cloud, log, args):
    """Cloud-init processing function"""
    onboard_status = SUCCESS
    if wait_for_do_to_complete():
        response = tmos_onboard_utils.get_as3_declaration()
        if response:
            LOG.info('making initial f5-appsvcs-extension declaration')
            if response.status_code == 204 or response.status_code == 200:
                as3_declared = tmos_onboard_utils.as3_declare()
                if not as3_declared:
                    LOG.error('f5-appsvcs-extension inital declaration failed')
                    onboard_status = ERROR
                else:
                    LOG.info(
                        'f5-appsvcs-extension initial declaration submitted successfully')
            else:
                LOG.warn(
                    'f5-appsvcs-extension has a previously errored declaration, not deploying')
                onboard_status = ERROR
        else:
            LOG.error(
                'f5-appsvcs-extension has failed, not deploying initial declaration declaration %s - %s',
                response.status_code, response.text)
            onboard_status = ERROR
    else:
        LOG.error(
            'f5-declarative-onboarding has failed, not deploying f5-appsvcs-extension initial declaration')
        onboard_status = ERROR

    if os.path.exists(CLOUD_CONFIG_FILE):
        # read config
        phone_home_url = None
        if 'phone_home_url' in cloud_config[name]:
            phone_home_url = cloud_config[name]['phone_home_url']
        phone_home_cli = None
        if 'phone_home_cli' in cloud_config[name]:
            phone_home_cli = cloud_config[name]['phone_home_cli']
        post_onboard_enabled = False
        if 'post_onboard_enabled' in cloud_config[name]:
            post_onboard_enabled = bool(
                cloud_config[name]['post_onboard_enabled'])
        if post_onboard_enabled:
            cmd_file_dir = "%s%s%s" % (
                POST_ONBOARD_CMD_FILE_DIR_PREFIX,
                name,
                POST_ONBOARD_CMD_FILE_DIR_POSTFIX
            )
            flag_file = "%s%s%s" % (
                POST_ONBOARD_CMD_FILE_DIR_PREFIX,
                name,
                '/POST_ONBOARD_COMPLETE'
            )
            post_onboard_script = cmd_file_dir + '/onboard.sh'
            if os.path.exists(post_onboard_script):
                with open(LOG_FILE, 'a+') as onboardlog:
                    LOG.info('running post onboard script')
                    subprocess.call(['nohup', 'sh', '-c', post_onboard_script, '&'],
                                    stdout=onboardlog, stderr=onboardlog)
                end_time = time.time() + ONBOARD_TIMEOUT
                while (end_time - time.time()) > 0:
                    if not os.path.exists(flag_file):
                        time.sleep(1)
                    else:
                        end_time = 0
                if not os.path.exists(flag_file):
                    LOG.error('post onboard commands did not complete properly')
                    if phone_home_url:
                        onboard_status = ERROR
                        tmos_onboard_utils.phone_home(
                            phone_home_url, True, True, ERROR)
        # call phone_home
        if phone_home_url:
            tmos_onboard_utils.phone_home(
                phone_home_url, True, True, onboard_status)
        if phone_home_cli and onboard_status == SUCCESS:
            tmos_onboard_utils.run_cmd(phone_home_cli)

    # remove inject line in /config/startup
    injected_already = subprocess.Popen(
        "cat /config/startup | grep " + AS3_DELAYED_DEPLOYMENT_SCRIPT + " | wc -l",
        stdout=subprocess.PIPE, shell=True
    ).communicate()[0].replace('\n', '')
    if injected_already == '1':
        subprocess.call(['/bin/sed', '-i', "/%s/d" %
                         AS3_DELAYED_DEPLOYMENT_SCRIPT, '/config/startup'])

    LOG.info('onboarding ended with status: %s', onboard_status)


if __name__ == "__main__":
    # Running the cloud-init module from the CLI python interpreter
    CLOUD_CONFIG_FILE = '/opt/cloud/instance/cloud-config.txt'
    CLOUD_CONFIG = {}
    if os.path.exists(CLOUD_CONFIG_FILE):
        CLOUD_CONFIG = util.read_conf(CLOUD_CONFIG_FILE)
    handle(sys.argv[1], CLOUD_CONFIG, None, logging, [])
