#!/usr/bin/env python

# coding=utf-8
# Copyright (c) 2016-2018, F5 Networks, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

"""
This module enables the TMOS mgmt interface to be provisioned
statically through cloudinit userdata.

The module must be enabled in the userdata YAML to perform any
onboarding artifact generation or onboarding.

#cloud-config
tmos_satic_mgmt:
  enabled: True
  ip: 192.168.245.100/24
  gw: 192.168.245.1
  mtu: 1450

"""
import os
import sys
import datetime
import subprocess
import time

from cloudinit import util
from cloudinit import log as logging

import tmos_onboard_utils

LOG = logging.getLogger(__name__)

OUT_DIR = '/config/cloud/tmos_static_mgmt'

ONBOARD_COMPLETE_FLAG_FILE = OUT_DIR + '/ONBOARD_COMPLETE'

PROGRESS_FILE = OUT_DIR + '/cloudinit.log'

TMSH_CMD_FILE_DIR = OUT_DIR + '/initscripts'


def tmsh_cmd_dir_exists():
    """Ensures TMSH generated init script directory exists"""
    if not os.path.isdir(TMSH_CMD_FILE_DIR):
        os.makedirs(TMSH_CMD_FILE_DIR)


def log_progress(message):
    """Generate a progress log entry"""
    if not os.path.isdir(OUT_DIR):
        os.makedirs(OUT_DIR)
    with open(PROGRESS_FILE, 'a+') as progress_file:
        progress_file.write(
            '[' + datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S.%m") + '] - ' + message + '\n')
        if __name__ == "__main__":
            print(
                '[' + datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S.%m") +
                '] - ' + message
            )


def is_mcpd():
    """Determines if the TMOS master control process is running"""
    log_progress('checking mcpd run state')
    running = subprocess.Popen(
        "tmsh -a show sys mcp-state field-fmt | grep running | wc -l",
        stdout=subprocess.PIPE, shell=True
    ).communicate()[0].replace('\n', '')
    if int(running) == 1:
        log_progress('mcpd is running')
        return True
    log_progress('mcpd is not running')
    return False


def is_onenic():
    """Determines if the TMOS deployment is a 1NIC deployment"""
    log_progress('testing is 1NIC deployment')
    if is_mcpd():
        fnull = open(os.devnull, 'w')
        is_1nic = subprocess.call(
            ['/usr/bin/tmsh', 'list', 'net', 'interface', '1.0'], stdout=fnull, stderr=fnull)
        if is_1nic == 0:
            log_progress('1NIC deployment detected from tmsh')
            return True
        log_progress('tmsh did not see interface 1.0, not 1NIC')
        return False
    else:
        log_progress('enumerating linux ip link devices')
        interfaces = subprocess.Popen(
            "ip link | egrep 'eth[1-9]' | cut -d':' -f2 | tr -d ' '",
            stdout=subprocess.PIPE, shell=True
        ).communicate()[0].split('\n')
        if 'eth1' in interfaces:
            log_progress('linux ip saw multiple interfaces, not 1NIC')
            return False
        log_progress('1NIC deployment detected from linux ip link')
        return True


def create_onboard_artifacts(mgmt_cidr, mgmt_gw, mgmt_mtu, post_onboard_commands):
    """Generates all needed onboarding artifacts from metadata"""
    tmsh_cmd_dir_exists()
    network_onboard_script = TMSH_CMD_FILE_DIR + '/001_mgmt_setup.sh'
    if os.path.isfile(network_onboard_script):
        util.del_file(network_onboard_script)
    with open(network_onboard_script, 'w') as mgmt_script:
        mgmt_script.write("#!/bin/bash\n")
        mgmt_script.write("echo 'starting static mgmt network provisioning'\n")
        mgmt_script.write(
            "tmsh modify sys global-settings mgmt-dhcp disabled\n")
        onenic = is_onenic()
        if onenic:
            mgmt_script.write("echo '1 NIC deployment discovered'\n")
            mgmt_script.write("tmsh modify sys httpd ssl-port 8443\n")
            mgmt_script.write(
                "tmsh modify net self-allow defaults add { tcp:8443 }\n")
            mgmt_script.write("tmsh create sys management-ip %s\n" % mgmt_cidr)
            mgmt_script.write(
                "tmsh modify sys management-ip %s description 'provisioned by tmos_static_mgmt'\n" % mgmt_cidr)
            if mgmt_mtu:
                mgmt_script.write(
                    "tmsh create net vlan internal { interfaces replace-all-with { 1.0 { } } tag 4094 mtu %s }\n" % mgmt_mtu)
            else:
                mgmt_script.write(
                    "tmsh create net vlan internal { interfaces replace-all-with { 1.0 { } } tag 4094 }\n")
            mgmt_script.write(
                "tmsh create net self self_1nic { address %s allow-service default vlan internal }\n" % mgmt_cidr)
            if mgmt_gw:
                mgmt_script.write(
                    "tmsh create sys management-route default gateway %s\n" % mgmt_gw)
                mgmt_script.write(
                    "tmsh create net route default network default gw %s\n" % mgmt_gw)
        else:
            mgmt_script.write("sleep 5\n")
            mgmt_script.write("tmsh create sys management-ip %s\n" % mgmt_cidr)
            mgmt_script.write(
                "tmsh modify sys management-ip %s description 'provisioned by tmos_static_mgmt'\n" % mgmt_cidr)
            if mgmt_gw:
                mgmt_script.write(
                    "tmsh create sys management-route default gateway %s\n" % mgmt_gw)
            if mgmt_mtu:
                mgmt_script.write("ip link set mgmt mtu %s\n" % mgmt_mtu)
                mgmt_script.write(
                    "echo 'ip link set mgmt mtu %s' > /config/startup\n" % mgmt_mtu)
        mgmt_script.write("echo 'mgmt interface configured: %s'\n" % mgmt_cidr)
        mgmt_script.write("tmsh save sys config base\n")
    if post_onboard_commands:
        post_onboard_commands_script = TMSH_CMD_FILE_DIR + '/002_post_onboard_commands.sh'
        if os.path.isfile(post_onboard_commands_script):
            util.del_file(post_onboard_commands_script)
        with open(post_onboard_commands_script, 'w') as pob_script:
            pob_script.write("#!/bin/bash\n")
            pob_script.write(
                "echo 'starting post onboarding commands provisioning'\n")
            pob_script.write("cmds=(\n")
            for cmd in post_onboard_commands:
                pob_script.write("\"%s\"\n" % cmd.replace('"', r'\"'))
            pob_script.write(")\n\n")
            pob_script.write("for (( i = 0; i < ${#cmds[@]} ; i++ )); do\n")
            pob_script.write("    echo \"Running: ${cmds[$i]}\"\n")
            pob_script.write("    eval \"${cmds[$i]}\"\n")
            pob_script.write("    if [ $? -eq 1 ]; then\n")
            pob_script.write(
                "        echo \"Command: ${cmds[$i]} Failed. Stopping execution of any further commands.\"\n")
            pob_script.write("        exit 1\n")
            pob_script.write("    fi\n")
            pob_script.write("done\n\n")


def onboard():
    """Implements the onboarding business logic"""
    onboard_script = TMSH_CMD_FILE_DIR + '/onboard.sh'
    if os.path.isfile(onboard_script):
        util.del_file(onboard_script)
    script_files = os.listdir(TMSH_CMD_FILE_DIR)
    script_files.sort()
    with open(onboard_script, 'w') as obs:
        obs.write("#!/bin/bash\n\n")
        obs.write("function check_mcpd_up() {\n")
        obs.write("    checks=0\n")
        obs.write("    while [ $checks -lt 120 ]; do\n")
        obs.write(
            "        if tmsh -a show sys mcp-state field-fmt 2> /dev/null | grep -q running; then\n")
        obs.write("            break\n")
        obs.write("        fi\n")
        obs.write("        echo 'waiting for mcpd to reach running state'\n")
        obs.write("        let checks=checks+1\n")
        obs.write("        sleep 10\n")
        obs.write("    done\n")
        obs.write("}\n\n")
        obs.write("function exec_phases() {\n")
        for script_file in script_files:
            obs.write("    /bin/bash %s/%s\n" %
                      (TMSH_CMD_FILE_DIR, script_file))
        obs.write("}\n\n")
        obs.write("check_mcpd_up\n")
        obs.write("exec_phases\n")
        obs.write("echo 1 > " + ONBOARD_COMPLETE_FLAG_FILE + '\n')
    os.chmod(onboard_script, 0775)
    with open('/var/log/onboard.log', 'a+') as onboardlog:
        subprocess.call(['nohup', 'sh', '-c', onboard_script,
                         '&'], stdout=onboardlog, stderr=onboardlog)
    wait_for_onboarding = 120
    while wait_for_onboarding > 0:
        wait_for_onboarding -= 1
        if not os.path.exists(ONBOARD_COMPLETE_FLAG_FILE):
            time.sleep(1)
        else:
            wait_for_onboarding = 0


def handle(name, cloud_config, cloud, log, args):
    """Cloud-init processing function"""
    tag = 'tmos_static_mgmt'
    enabled = False
    if tag in cloud_config:
        try:
            enabled = bool(cloud_config[tag]['enabled'])
        except Exception:
            util.logexc(
                log, tag + " missing enabled attribute")
            return
    if enabled:
        mgmt_ip = None
        if 'ip' in cloud_config[tag]:
            mgmt_ip = cloud_config[tag]['ip']
        if not mgmt_ip:
            util.logexc(
                log, tag + " missing ip attribute")
            return
        mgmt_netmask = None
        if 'netmask' in cloud_config[tag]:
            mgmt_netmask = cloud_config[tag]['netmask']
        mgmt_gw = None
        if 'gw' in cloud_config[tag]:
            mgmt_gw = cloud_config[tag]['gw']
        mgmt_mtu = 1500
        if 'mtu' in cloud_config[tag]:
            mgmt_mtu = cloud_config[tag]['mtu']
        post_onboard_enabled = False
        if 'post_onboard_enabled' in cloud_config[tag]:
            post_onboard_enabled = bool(
                cloud_config[tag]['post_onboard_enabled'])
        post_onboard_commands = []
        if 'post_onboard_commands' in cloud_config[tag] and post_onboard_enabled:
            post_onboard_commands = cloud_config[tag]['post_onboard_commands']
        mgmt_cidr = mgmt_ip
        if mgmt_ip.find('/') < 0:
            if not mgmt_netmask:
                util.logexc(
                    log, tag + " ip is not in CIDR format and no netmask supplied")
                return
            if tmos_onboard_utils.is_v4(mgmt_ip):
                mgmt_nm = tmos_onboard_utils.ipv4_cidr_from_netmask(mgmt_netmask)
                mgmt_cidr = "%s/%s" % (mgmt_ip, mgmt_netmask)
            else:
                mgmt_nm = tmos_onboard_utils.ipv6_cidr_from_netmask(mgmt_netmask)
                mgmt_cidr = "%s/%s" % (mgmt_ip, mgmt_netmask)
        create_onboard_artifacts(
            mgmt_cidr, mgmt_gw, mgmt_mtu, post_onboard_commands)
        onboard(post_onboard_enabled)


if __name__ == "__main__":
    # Running the cloud-init module from the CLI python interpreter
    CLOUD_CONFIG_FILE = '/opt/cloud/instance/cloud-config.txt'
    CLOUD_CONFIG = {
        'tmos_static_mgmt': {
            'enabled': True,
            'ip': sys.argv[1],
            'gw': sys.argv[2],
            'mtu': sys.argv[3]
        }
    }
    if os.path.exists(CLOUD_CONFIG_FILE):
        CLOUD_CONFIG = util.read_conf(CLOUD_CONFIG_FILE)
    handle('cc_tmos_static_mgmt', CLOUD_CONFIG, None, logging, [])
