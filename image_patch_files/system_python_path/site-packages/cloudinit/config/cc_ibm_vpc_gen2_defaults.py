#!/usr/bin/env python

# coding=utf-8
# pylint: disable=broad-except,unused-argument,line-too-long
# Copyright (c) 2016-2018, F5 Networks, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
"""
This module reads IBM VPC Gen2 proprietary metadata and vendor_data
and sets default system values.
"""
import json
import logging
import os
import subprocess
import time

from cloudinit import util
from cloudinit import tmos_onboard_utils

# constants
MODULE_NAME = 'ibm_vpc_gen2_defaults'

OUT_DIR = '/var/lib/cloud/' + MODULE_NAME
EXEC_DIR = '/opt/cloud/' + MODULE_NAME

LOG_FILE = '/var/log/f5-cloudinit.log'

VENDOR_DATA_RAW_FILE = '/opt/cloud/instance/vendor-data.txt.i'

tmos_onboard_utils.touch_file(LOG_FILE)

LOG = logging.getLogger(MODULE_NAME)
LOG.setLevel(logging.DEBUG)
FORMATTER = logging.Formatter(
    '%(asctime)s - %(name)s - %(levelname)s - %(message)s')
LOGFILE = logging.FileHandler(LOG_FILE)
LOGFILE.setLevel(logging.DEBUG)
LOGFILE.setFormatter(FORMATTER)
LOG.addHandler(LOGFILE)

def handle(name, cloud_config, cloud, log, args):
    """Cloud-init processing function"""
    tag = MODULE_NAME
    # find SSH key
    if os.path.exists(VENDOR_DATA_RAW_FILE):
        LOG.debug('attempting to extract SSH key from vendor_data')
        public_keys = []
        with open(VENDOR_DATA_RAW_FILE, 'r') as vdf:
            for line in vdf:
                if 'ssh-rsa' in line:
                    public_keys.append(line[line.index('ssh-rsa'):])
        if public_keys:
            LOG.debug('injecting %d SSH authorized keys for root' % len(public_keys))
            tmos_onboard_utils.inject_public_ssh_keys(public_keys)
            # disable root and admin accounts
            LOG.debug('disabling default account login with passwords')
            subprocess.call(['/sbin/usermod', '-L', 'root'])
            subprocess.call(['/sbin/usermod', '-L', 'admin'])
    # forcing hostname
    if "local-hostname" in cloud.datasource.metadata:
        LOG.debug('forcing localhost name to %s' % cloud.datasource.metadata['local-hostname'])
        tmos_onboard_utils.wait_for_mcpd()
        tmos_onboard_utils.run_cmd("tmsh modify sys global-settings hostname %s.local" % cloud.datasource.metadata['local-hostname'])


if __name__ == "__main__":
    # Running the cloud-init module from the CLI python interpreter
    CLOUD_CONFIG_FILE = '/opt/cloud/instance/cloud-config.txt'
    CLOUD_CONFIG = {
        MODULE_NAME: {
            'enabled': True
        }
    }
    if os.path.exists(CLOUD_CONFIG_FILE):
        CLOUD_CONFIG = util.read_conf(CLOUD_CONFIG_FILE)
    handle(MODULE_NAME, CLOUD_CONFIG, None, logging, [])