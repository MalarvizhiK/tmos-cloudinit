#!/usr/bin/env python

# coding=utf-8
# pylint: disable=broad-except,unused-argument,line-too-long
# Copyright (c) 2016-2018, F5 Networks, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
"""
This module reads f5-declarative-onboarding and f5-appsvcs-3
declarations from userdata.

The module must be enabled in the userdata YAML to perform any
onboarding artifact generation or onboarding.

#cloud-config
tmos_declared:
  enabled: True

This module will also look for YAML metadata which typically
is handled by the cc_ssh.py module:

#cloud-config
ssh_authorized_keys:
  - ssh-rsa [key]
  - ssh-rsa [key]

The standard cloud-init cc_ssh.py module alters SELinux
configurations which may not be compatible with TMOS

Additional attributes supported in the YAML declaration
include

do_declaration - f5-declarative-onboarding declaration.

as3_declaration - the f5-appsvc-3 declaration to apply after onboarding.

#cloud-config
tmos_configdrive_openstack:
  enabled: True
  do_declaration:
    Common:
      class: Tenant
      licenseKey:
        class: License
        licenseType: regKey
        regKey: GJKDM-UJTJH-OJZVX-ZJPEG-XTJIAHI
      provisioningLevels:
        class: Provision
        ltm: nominal
        asm: minimum
  as3_declaration:
    class: AS3
    action: deploy
    persist: true
    declaration:
      class: ADC
      schemaVersion: 3.0.0

"""
import logging
import os
import subprocess

from cloudinit import util

import tmos_onboard_utils

# constants
OUT_DIR = '/config/cloud/tmos-declared'

LOG_FILE = '/config/cloud/f5-cloudinit.log'

AS3_DELAYED_DEPLOYMENT_SCRIPT = 'cc_tmos_as3_declare_after_do.py'

tmos_onboard_utils.touch_logfile(LOG_FILE)

LOG = logging.getLogger('tmos_declared')
LOG.setLevel(logging.DEBUG)
FORMATTER = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
LOGFILE = logging.FileHandler(LOG_FILE)
LOGFILE.setLevel(logging.DEBUG)
LOGFILE.setFormatter(FORMATTER)
LOG.addHandler(LOGFILE)


def onboard(do_declaration, as3_declaration):
    """Implements the onboarding business logic"""

    try:
        tmos_onboard_utils.persist_do_declaration(do_declaration, None)
    except Exception as err:
        LOG.error(
            'could not persist f5-declarative-onboarding declaration: %s', err)
        return False

    as3_enabled = True
    if as3_declaration:
        try:
            tmos_onboard_utils.persist_as3_declaration(as3_declaration)
        except Exception as err:
            LOG.error('could not persist f5-appsvcs-3 declaration %s', err)
            as3_enabled = False
    else:
        as3_enabled = False

    if not tmos_onboard_utils.is_mgmt_ip:
        LOG.debug('waiting on mgmt interface provisioning to complete')
        tmos_onboard_utils.wait_for_mgmt_dhcp(timeout=600)

    LOG.debug('waiting for mcpd to become available')
    tmos_onboard_utils.wait_for_mcpd()

    LOG.debug('waiting for iControl to become available')
    tmos_onboard_utils.wait_for_icontrol()

    LOG.info('installing discovered iControl LX extensions')
    tmos_onboard_utils.install_extensions()

    LOG.debug('waiting for iControl LX interfaces to be available')
    tmos_onboard_utils.wait_for_icontrollx()

    LOG.debug('waiting for f5-declarative-onbaording to become available')
    tmos_onboard_utils.wait_for_rest_worker(
        '/mgmt/shared/declarative-onboarding', timeout=30)

    if not tmos_onboard_utils.do_declare():
        LOG.error('f5-declarative-onboarding initial post failed..exiting')
        return False
    if as3_enabled:
        deploy_script_name = "%s/%s" % (
            os.path.dirname(os.path.realpath(__file__)), AS3_DELAYED_DEPLOYMENT_SCRIPT)
        injected_already = subprocess.Popen(
            "cat /config/startup | grep " + AS3_DELAYED_DEPLOYMENT_SCRIPT + " | wc -l",
            stdout=subprocess.PIPE, shell=True
        ).communicate()[0].replace('\n', '')
        if injected_already == '0':
            LOG.info('injecting f5-appsrvs-3 delayed deployment script %s into /config/startup', deploy_script_name)
            with open('/config/startup', 'a+') as css:
                css.write('/usr/bin/env python %s &' % deploy_script_name)
        LOG.info('running f5-appsrvs-3 delayed deployment script %s', deploy_script_name)
        subprocess.call(['/usr/bin/env', 'python', deploy_script_name, '&'])
    LOG.info('onboarding complete')
    return True


def handle(name, cloud_config, cloud, log, args):
    """Cloud-init processing function"""
    tag = 'tmos_declared'
    enabled = False
    do_declaration = None
    if tag in cloud_config:
        try:
            enabled = bool(cloud_config[tag]['enabled'])
            do_declaration = cloud_config[tag]['do_declaration']
        except Exception:
            LOG.error('%s missing enabled or do_declaration attributes.. exiting', tag)
            return
    if enabled and do_declaration:
        LOG.info("%s enabled", tag)
        keys = []
        if "ssh_authorized_keys" in cloud_config:
            cfgkeys = cloud_config["ssh_authorized_keys"]
            keys.extend(cfgkeys)
            LOG.info('%s found ssh_authorized_keys', tag)
        icontrollx_package_urls = []
        if 'icontrollx_package_urls' in cloud_config[tag]:
            icontrollx_package_urls = cloud_config[tag]['icontrollx_package_urls']
            LOG.info('%s found icontrollx_package_urls', tag)
        as3_declaration = None
        if 'as3_declaration' in cloud_config[tag]:
            as3_declaration = cloud_config[tag]['as3_declaration']
            LOG.info('%s found as3_declaration', tag)
        tmos_onboard_utils.inject_public_ssh_keys(keys)

        # download referenced extensions
        for ext_url in icontrollx_package_urls:
            try:
                tmos_onboard_utils.download_extension(ext_url)
            except Exception as err:
                LOG.error('%s can not download %s - %s', tag, ext_url, err)

        try:
            onboard(do_declaration, as3_declaration)
        except Exception as err:
            LOG.error('onboard exception - %s', err)
        tmos_onboard_utils.clean()


if __name__ == "__main__":
    # Running the cloud-init module from the CLI python interpreter
    CLOUD_CONFIG_FILE = '/opt/cloud/instance/cloud-config.txt'
    CLOUD_CONFIG = {
        'tmos_declared': {
            'enabled': True,
            'do_declaration': {},
            'as3_declaration': {}
        }
    }
    if os.path.exists(CLOUD_CONFIG_FILE):
        CLOUD_CONFIG = util.read_conf(CLOUD_CONFIG_FILE)
    handle('cc_tmos_declared',
           CLOUD_CONFIG, None, logging, [])
