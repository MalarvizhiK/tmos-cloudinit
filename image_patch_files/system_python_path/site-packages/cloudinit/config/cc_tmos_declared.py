#!/usr/bin/env python

# coding=utf-8
# pylint: disable=broad-except,unused-argument,line-too-long
# Copyright (c) 2016-2018, F5 Networks, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
"""
This module reads f5-declarative-onboarding and f5-appsvcs-extension
declarations from userdata.

The module must be enabled in the userdata YAML to perform any
onboarding artifact generation or onboarding.

#cloud-config
tmos_declared:
  enabled: True

This module will also look for YAML metadata which typically
is handled by the cc_ssh.py module:

#cloud-config
ssh_authorized_keys:
  - ssh-rsa [key]
  - ssh-rsa [key]

The standard cloud-init cc_ssh.py module alters SELinux
configurations which may not be compatible with TMOS

Additional attributes supported in the YAML declaration
include

do_declaration - f5-declarative-onboarding declaration.

as3_declaration - the f5-appsvc-3 declaration to apply after onboarding.

#cloud-config
tmos_declared:
  enabled: True
  do_declaration:
    Common:
      class: Tenant
      licenseKey:
        class: License
        licenseType: regKey
        regKey: GJKDM-UJTJH-OJZVX-ZJPEG-XTJIAHI
      provisioningLevels:
        class: Provision
        ltm: nominal
        asm: minimum
  as3_declaration:
    class: AS3
    action: deploy
    persist: true
    declaration:
      class: ADC
      schemaVersion: 3.0.0

"""
import logging
import os
import subprocess

from cloudinit import util
from cloudinit import tmos_onboard_utils

# constants
MODULE_NAME = 'tmos_declared'

OUT_DIR = '/config/cloud/' + MODULE_NAME


OUT_DIR = '/config/cloud/tmos-declared'

LOG_FILE = '/var/log/f5-cloudinit.log'

AS3_DELAYED_DEPLOYMENT_SCRIPT = 'cc_tmos_as3_declare_after_do.py'

ERROR = 'ERROR'
SUCCESS = 'SUCCESS'

tmos_onboard_utils.touch_logfile(LOG_FILE)

LOG = logging.getLogger(MODULE_NAME)
LOG.setLevel(logging.DEBUG)
FORMATTER = logging.Formatter(
    '%(asctime)s - %(name)s - %(levelname)s - %(message)s')
LOGFILE = logging.FileHandler(LOG_FILE)
LOGFILE.setLevel(logging.DEBUG)
LOGFILE.setFormatter(FORMATTER)
LOG.addHandler(LOGFILE)


def onboard(do_declaration, as3_declaration, phone_home_url, phone_home_cli):
    """Implements the onboarding business logic"""

    do_enabled = True
    if do_declaration:
        try:
            tmos_onboard_utils.persist_do_declaration(do_declaration, None)
        except Exception as err:
            LOG.error(
                'could not persist f5-declarative-onboarding declaration: %s', err)
            do_enabled = False
    else:
        do_enabled = False

    as3_enabled = True
    if as3_declaration:
        try:
            tmos_onboard_utils.persist_as3_declaration(as3_declaration)
        except Exception as err:
            LOG.error(
                'could not persist f5-appsvcs-extension declaration %s', err)
            as3_enabled = False
    else:
        as3_enabled = False

    if not tmos_onboard_utils.is_mgmt_ip:
        LOG.debug('waiting on mgmt interface provisioning to complete')
        tmos_onboard_utils.wait_for_mgmt_dhcp(timeout=600)

    LOG.debug('waiting for mcpd to become available')
    tmos_onboard_utils.wait_for_mcpd()

    LOG.debug('waiting for iControl to become available')
    tmos_onboard_utils.wait_for_icontrol()

    LOG.info('installing discovered iControl LX extensions')
    tmos_onboard_utils.install_extensions()

    if do_enabled or as3_enabled:
        LOG.debug('waiting for iControl LX interfaces to be available')
        tmos_onboard_utils.wait_for_icontrollx()

    do_posted = False
    if do_enabled:
        LOG.debug('waiting for f5-declarative-onbaording to become available')
        tmos_onboard_utils.wait_for_rest_worker(
            '/mgmt/shared/declarative-onboarding', timeout=30)

        if tmos_onboard_utils.do_declare():
            do_posted = True

    if do_posted and as3_enabled:
        # DO enabled, posted async, need to background AS3 - phone home deferred to background AS3 process
        deploy_script_name = "%s/%s" % (
            os.path.dirname(os.path.realpath(__file__)), AS3_DELAYED_DEPLOYMENT_SCRIPT)
        injected_already = subprocess.Popen(
            "cat /config/startup | grep " + AS3_DELAYED_DEPLOYMENT_SCRIPT + " | wc -l",
            stdout=subprocess.PIPE, shell=True
        ).communicate()[0].replace('\n', '')
        # if DO needs to reboot.. add the AS3 background process to /config/startup to persist across reboots
        if injected_already == '0':
            LOG.info(
                'injecting f5-appsvcs-extension delayed deployment script %s into /config/startup', deploy_script_name)
            with open('/config/startup', 'a+') as css:
                css.write("/usr/bin/env python %s %s &\n" %
                          (deploy_script_name, MODULE_NAME))
        # launch the background AS3 process now
        LOG.info(
            'running f5-appsvcs-extension delayed deployment script %s', deploy_script_name)
        subprocess.call(['/usr/bin/env', 'python',
                         deploy_script_name, MODULE_NAME, '&'])
    elif do_enabled and not do_posted:
        # DO enabled, initial post failed (bad declaration syntax)
        # fail the phone_home_url
        if phone_home_url:
            tmos_onboard_utils.phone_home(
                phone_home_url, do_enabled, as3_enabled, ERROR)
        LOG.info('onboarding ended with status: %s', ERROR)
    elif as3_enabled:
        # DO not enabled, run AS3 declaration now
        onboard_status = SUCCESS
        response = tmos_onboard_utils.get_as3_declaration()
        if hasattr(response, 'status_code'):
            LOG.info('making initial f5-appsvcs-extension declaration')
            if response.status_code == 204 or response.status_code == 200:
                as3_declared = tmos_onboard_utils.as3_declare()
                if not as3_declared:
                    LOG.error('f5-appsvcs-extension inital declaration failed')
                    onboard_status = ERROR
                else:
                    LOG.info(
                        'f5-appsvcs-extension initial declaration submitted successfully')
            else:
                LOG.warn(
                    'f5-appsvcs-extension has a previously errored declaration, not deploying')
                onboard_status = ERROR
        else:
            LOG.error(
                'f5-appsvcs-extension has failed, not deploying initial declaration declaration %s - %s',
                response.status_code, response.text)
            onboard_status = ERROR
            if phone_home_url:
                tmos_onboard_utils.phone_home(
                    phone_home_url, do_enabled, as3_enabled, onboard_status)
            if phone_home_cli and onboard_status == SUCCESS:
                tmos_onboard_utils.run_cmd(phone_home_cli)
            LOG.info('onboarding ended with status: %s', onboard_status)
    else:
        # neither DO or AS3 enabled
        if phone_home_url:
            tmos_onboard_utils.phone_home(
                phone_home_url, do_enabled, as3_enabled, SUCCESS)
        if phone_home_cli:
            tmos_onboard_utils.run_cmd(phone_home_cli)
        LOG.info('onboarding ended with status: %s', SUCCESS)


def handle(name, cloud_config, cloud, log, args):
    """Cloud-init processing function"""
    tag = MODULE_NAME
    enabled = False

    if tag in cloud_config:
        try:
            enabled = bool(cloud_config[tag]['enabled'])
        except Exception:
            LOG.error('%s missing enabled.. exiting', tag)
            return

    if enabled:
        LOG.info("%s enabled", tag)
        keys = []
        if "ssh_authorized_keys" in cloud_config:
            cfgkeys = cloud_config["ssh_authorized_keys"]
            keys.extend(cfgkeys)
            LOG.info('%s found ssh_authorized_keys', tag)
        tmos_onboard_utils.inject_public_ssh_keys(keys)

        # download referenced extensions
        icontrollx_package_urls = []
        if 'icontrollx_package_urls' in cloud_config[tag]:
            icontrollx_package_urls = cloud_config[tag]['icontrollx_package_urls']
            LOG.info('%s found icontrollx_package_urls', tag)
        for ext_url in icontrollx_package_urls:
            LOG.info('downloading: %s', ext_url)
            if tmos_onboard_utils.download_extension(ext_url):
                LOG.info(
                    'extension %s downloaded in discovered iControl extensions', ext_url)
            else:
                LOG.error('exenstion %s could not be donwloaded', ext_url)

        do_declaration = None
        if 'do_declaration' in cloud_config[tag]:
            do_declaration = cloud_config[tag]['do_declaration']
            LOG.info('%s found do_declaration', tag)

        as3_declaration = None
        if 'as3_declaration' in cloud_config[tag]:
            as3_declaration = cloud_config[tag]['as3_declaration']
            LOG.info('%s found as3_declaration', tag)

        phone_home_url = None
        if 'phone_home_url' in cloud_config[tag]:
            phone_home_url = cloud_config[tag]['phone_home_url']

        phone_home_cli = None
        if 'phone_home_cli' in cloud_config[tag]:
            phone_home_cli = cloud_config[tag]['phone_home_cli']

        try:
            onboard(do_declaration, as3_declaration,
                    phone_home_url, phone_home_cli)
        except Exception as err:
            LOG.error('onboard exception - %s', err)
        try:
            tmos_onboard_utils.clean()
        except Exception as err:
            LOG.error('onboard cleanup exception - %s', err)


if __name__ == "__main__":
    # Running the cloud-init module from the CLI python interpreter
    CLOUD_CONFIG_FILE = '/opt/cloud/instance/cloud-config.txt'
    CLOUD_CONFIG = {
        MODULE_NAME: {
            'enabled': True,
            'do_declaration': {},
            'as3_declaration': {}
        }
    }
    if os.path.exists(CLOUD_CONFIG_FILE):
        CLOUD_CONFIG = util.read_conf(CLOUD_CONFIG_FILE)
    handle(MODULE_NAME, CLOUD_CONFIG, None, logging, [])
